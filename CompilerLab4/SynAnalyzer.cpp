#include "SynAnalyzer.h"
#include <fstream>

//Command
Command::Command(string s) {
    char tmp[200];
    int t = 0;
    for (int i = 0;i < s.size();i++) {
        if (s[i] == ' ' || s[i] == ';') {
            if (t != 0) {
                tmp[t] = '\0';
                t = 0;
                args.push_back(tmp);
            }
        }
        else {
            tmp[t++] = s[i];
        }
    }
}

void Command::print() {
    for (string arg : args) {
        cout << arg << ",";
    }
    cout << endl;
}

//SynAnalyzer
SynAnalyzer::SynAnalyzer() {
stack_state[0] = 0;
stack_t = 1;gens.push_back(new Generator("[PP] -> [P]"));gens.push_back(new Generator("[P] -> {createD NULL 1;} [Fdefs]"));gens.push_back(new Generator("[Fdefs] -> {mov 1 D -1 D; mov 2 D -1 D;} [Fdefs] [Fdef]"));gens.push_back(new Generator("[Fdefs] ->"));gens.push_back(new Generator("[Fdef] -> {createD -1 4; mov 8 D 4 D; let 8 retRef 0;} [T] <id> <(> [Arg_list] <)> {claimFun -1 D 1 T 2 value 4 argByte;} <{> [STs] <}> {defFun -1 D 2 value 8 byte -1 code;link3 -1 code -1 code 8 code; print -1 code;}"));gens.push_back(new Generator("[STs] -> {mov 1 D -1 D; mov 1 retRef -1 retRef; mov 1 Lin -1 Lin; mov 1 Lout -1 Lout; mov 1 brkRef -1 brkRef; mov 2 D -1 D; mov 2 retRef -1 retRef; mov 2 Lin -1 Lin; mov 2 Lout -1 Lout; mov 2 brkRef -1 brkRef;} [STs] [ST] {link3 -1 code 1 code 2 code; add3 -1 byte 1 byte 2 byte;}"));gens.push_back(new Generator("[STs] -> {empty -1 code;let -1 byte 0;}"));gens.push_back(new Generator("[T] -> <int> {mov -1 T 0 value;}"));gens.push_back(new Generator("[T] -> <void> {mov -1 T 0 value;}"));gens.push_back(new Generator("[Arg_list] -> {let -1 argByte 0;}"));gens.push_back(new Generator("[Arg_list] -> {mov 1 D -1 D; mov 2 D -1 D;} [Arg_def] [Arg_list_tail] {add3 -1 argByte 1 argByte 2 argByte;}"));gens.push_back(new Generator("[Arg_list_tail] -> {mov 1 D -1 D; mov 3 D -1 D;} [Arg_list_tail] <,> [Arg_def] {add3 -1 argByte 1 argByte 3 argByte;}"));gens.push_back(new Generator("[Arg_list_tail] -> {let -1 argByte 0;}"));gens.push_back(new Generator("[Arg_def] -> [T] <id> {createArg -1 D 0 T 1 value; getByte -1 argByte 0 T;}"));gens.push_back(new Generator("[ST] -> [T] {mov 2 D -1 D; mov 3 D -1 D; mov 2 T 0 T; mov 3 T 0 T;} [Var_init] [Var_def_tail] <;> {add3 -1 byte 2 byte 3 byte; link3 -1 code 2 code 3 code;}"));gens.push_back(new Generator("[Var_def_tail] -> {empty -1 code; let -1 byte 0;}"));gens.push_back(new Generator("[Var_def_tail] -> {mov 1 D -1 D; mov 3 D -1 D; mov 1 T -1 T; mov 3 T -1 T;} [Var_def_tail] <,> [Var_init] {add3 -1 byte 1 byte 3 byte;link3 -1 code 1 code 3 code;}"));gens.push_back(new Generator("[Var_init] -> <id> {createVar -1 D -1 T 0 value; c_=Const -1 D 0 value 0 -1 code; getByte -1 byte -1 T;}"));gens.push_back(new Generator("[Var_init] -> {mov 3 D -1 D;} <id> <=> [exp] {createVar -1 D -1 T 1 value; c_= -1 D 1 value -1 code; getByte -1 byte -1 T; link3 -1 code 3 code -1 code;}"));gens.push_back(new Generator("[exp_list] -> {empty -1 code;}"));gens.push_back(new Generator("[exp_list] -> {mov 1 D -1 D; mov 2 D -1 D;} [exp] [exp_list_tail] {link3 -1 code 2 code 1 code;}"));gens.push_back(new Generator("[exp_list_tail] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp_list_tail] <,> [exp] {link3 -1 code 3 code 1 code;}"));gens.push_back(new Generator("[exp_list_tail] -> {empty -1 code;}"));gens.push_back(new Generator("[ST] -> {mov 1 D -1 D;} [exp] <;> {pop -1 code; link3 -1 code 1 code -1 code;let -1 byte 0;}"));gens.push_back(new Generator("[ST] -> {mov 2 D -1 D;} <return> [exp] <;> {return -1 retRef -1 code;link3 -1 code 2 code -1 code;let -1 byte 0;}"));gens.push_back(new Generator("[ST] -> <return> <;> {returnVoid -1 retRef -1 code;let -1 byte 0;}"));gens.push_back(new Generator("[exp] -> {mov 1 D -1 D;} [exp1] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp] -> {mov 3 D -1 D;} <id> <=> [exp] {c_= -1 D 1 value -1 code;link3 -1 code 3 code -1 code;}"));gens.push_back(new Generator("[exp1] -> {mov 1 D -1 D;} [exp2] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp2] -> {mov 1 D -1 D;} [exp3] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp2] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp2] <||> [exp3] {c_|| -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp3] -> {mov 1 D -1 D;} [exp4] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp3] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp3] <&&> [exp4] {c_&& -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp4] -> {mov 1 D -1 D;} [exp5] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp4] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp4] <|> [exp5] {c_| -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp5] -> {mov 1 D -1 D;} [exp6] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp5] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp5] <^> [exp6] {c_^ -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp6] -> {mov 1 D -1 D;} [exp7] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp6] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp6] <&> [exp7] {c_& -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp7] -> {mov 1 D -1 D;} [exp8] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp7] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp7] <==> [exp8] {c_== -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp7] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp7] <!=> [exp8] {c_!= -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp8] -> {mov 1 D -1 D;} [exp9] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp8] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp8] <more> [exp9] {c_> -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp8] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp8] <<> [exp9] {c_< -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp8] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp8] <meq> [exp9] {c_>= -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp8] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp8] <<=> [exp9] {c_<= -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp9] -> {mov 1 D -1 D;} [exp10] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp10] -> {mov 1 D -1 D;} [exp11] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp10] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp10] <+> [exp11] {c_+ -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp10] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp10] <-> [exp11] {c_- -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp11] -> {mov 1 D -1 D;} [exp12] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp11] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp11] <*> [exp12] {c_* -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp11] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp11] </> [exp12] {c_/ -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp11] -> {mov 1 D -1 D; mov 3 D -1 D;} [exp11] <%> [exp12] {c_% -1 code; link3 1 code 1 code 3 code; link3 -1 code 1 code -1 code;}"));gens.push_back(new Generator("[exp12] -> {mov 1 D -1 D;} [exp13] {mov -1 code 1 code;}"));gens.push_back(new Generator("[exp12] -> {mov 2 D -1 D;} <+> [exp12] {mov -1 code 2 code;}"));gens.push_back(new Generator("[exp12] -> {mov 2 D -1 D;} <-> [exp12] {c_-1 -1 code; link3 -1 code 2 code -1 code;}"));gens.push_back(new Generator("[exp12] -> {mov 2 D -1 D;} <~> [exp13] {c_~ -1 code; link3 -1 code 2 code -1 code;}"));gens.push_back(new Generator("[exp12] -> {mov 2 D -1 D;} <!> [exp13] {c_! -1 code; link3 -1 code 2 code -1 code;}"));gens.push_back(new Generator("[exp13] -> {mov 2 D -1 D;} <(> [exp] <)> {mov -1 code 2 code;}"));gens.push_back(new Generator("[exp13] -> {mov 3 D -1 D;} <id> <(> [exp_list] <)> {callFun -1 D 1 value -1 code; link3 -1 code 3 code -1 code;}"));gens.push_back(new Generator("[exp13] -> <id> {takeVar -1 D 0 value -1 code;}"));gens.push_back(new Generator("[exp13] -> <const int> {takeConst 0 value -1 code;}"));gens.push_back(new Generator("[ST] -> {mov 3 D -1 D; createD -1 6; let 6 retRef 1; add3 6 retRef 6 retRef -1 retRef; mov 6 Lin -1 Lin; mov 6 Lout -1 Lout; let 6 brkRef 1; add3 6 brkRef 6 brkRef -1 brkRef;} <if> <(> [exp] <)> <{> [STs] <}> {label 6 Lout_if; jz 6 Lout_if -1 code; link3 -1 code 3 code -1 code; newEnv 6 byte -1 tmp; link3 -1 code -1 code -1 tmp; link3 -1 code -1 code 6 code; leave -1 tmp; link3 -1 code -1 code -1 tmp; pLabel 6 Lout_if -1 tmp; link3 -1 code -1 code -1 tmp; let -1 byte 0;}"));gens.push_back(new Generator("[ST] -> {mov 3 D -1 D; createD -1 6; createD -1 10; let 6 retRef 1; add3 6 retRef 6 retRef -1 retRef; let 10 retRef 1; add3 10 retRef 10 retRef -1 retRef; mov 6 Lin -1 Lin; mov 6 Lout -1 Lout; mov 10 Lin -1 Lin; mov 10 Lout -1 Lout; let 6 brkRef 1; add3 6 brkRef 6 brkRef -1 brkRef; let 10 brkRef 1; add3 10 brkRef 10 brkRef -1 brkRef;} <if> <(> [exp] <)> <{> [STs] <}> <else> <{> [STs] <}> {label 6 L1_if; label 6 L2_if; jz 6 L1_if -1 code; link3 -1 code 3 code -1 code; newEnv 6 byte -1 tmp; link3 -1 code -1 code -1 tmp; link3 -1 code -1 code 6 code; leave -1 tmp; link3 -1 code -1 code -1 tmp; j 6 L2_if -1 tmp; link3 -1 code -1 code -1 tmp; pLabel 6 L1_if -1 tmp; link3 -1 code -1 code -1 tmp; newEnv 10 byte -1 tmp; link3 -1 code -1 code -1 tmp; link3 -1 code -1 code 10 code; leave -1 tmp; link3 -1 code -1 code -1 tmp; pLabel 6 L2_if -1 tmp; link3 -1 code -1 code -1 tmp; let -1 byte 0;}"));gens.push_back(new Generator("[ST] -> {mov 3 D -1 D; createD -1 6; let 6 retRef 1; add3 6 retRef 6 retRef -1 retRef; label 6 Lin; label 6 Lout; let 6 brkRef 1;} <while> <(> [exp] <)> <{> [STs] <}> { pLabel 6 Lin -1 code; link3 -1 code -1 code 3 code; jz 6 Lout -1 tmp; link3 -1 code -1 code -1 tmp; newEnv 6 byte -1 tmp; link3 -1 code -1 code -1 tmp; link3 -1 code -1 code 6 code;leave -1 tmp; link3 -1 code -1 code -1 tmp; j 6 Lin -1 tmp; link3 -1 code -1 code -1 tmp; pLabel 6 Lout -1 tmp; link3 -1 code -1 code -1 tmp; let -1 byte 0;}"));gens.push_back(new Generator("[ST] -> <continue> <;> {leave_n -1 brkRef -1 tmp; j -1 Lin -1 code; link3 -1 code -1 tmp -1 code; let -1 byte 0;}"));gens.push_back(new Generator("[ST] -> <break> <;> {leave_n -1 brkRef -1 tmp; j -1 Lout -1 code; link3 -1 code -1 tmp -1 code; }"));start = gens[0]->left;ters.insert("!");ters.insert("!=");ters.insert("$");ters.insert("%");ters.insert("&");ters.insert("&&");ters.insert("(");ters.insert(")");ters.insert("*");ters.insert("+");ters.insert(",");ters.insert("-");ters.insert("/");ters.insert(";");ters.insert("<");ters.insert("<=");ters.insert("=");ters.insert("==");ters.insert("^");ters.insert("break");ters.insert("const int");ters.insert("continue");ters.insert("else");ters.insert("id");ters.insert("if");ters.insert("int");ters.insert("meq");ters.insert("more");ters.insert("return");ters.insert("void");ters.insert("while");ters.insert("{");ters.insert("|");ters.insert("||");ters.insert("}");ters.insert("~");nons.insert("Arg_def");nons.insert("Arg_list");nons.insert("Arg_list_tail");nons.insert("Fdef");nons.insert("Fdefs");nons.insert("P");nons.insert("PP");nons.insert("ST");nons.insert("STs");nons.insert("T");nons.insert("Var_def_tail");nons.insert("Var_init");nons.insert("exp");nons.insert("exp1");nons.insert("exp10");nons.insert("exp11");nons.insert("exp12");nons.insert("exp13");nons.insert("exp2");nons.insert("exp3");nons.insert("exp4");nons.insert("exp5");nons.insert("exp6");nons.insert("exp7");nons.insert("exp8");nons.insert("exp9");nons.insert("exp_list");nons.insert("exp_list_tail");ACTION = vector<map<string,pair<string,int> > >(318,map<string,pair<string,int>>());
int t=0;
string vs[11448] = {"","","r","","","","","","","","","","","","","","","","","","","","","","","r","","","","r","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","s","","","","s","","","","","","","","","acc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","r","","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","s","","","","s","","","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","s","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","s","s","s","","s","s","s","","","s","s","s","","","","s","s","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","r","","","","s","","s","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","","s","r","","r","s","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","s","","","","","","","","s","","","","","","","","r","","","","","","","","","","","","","","","","","","","","r","","","","","","","","r","","","","","","","","r","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","","","","","","","r","","","","","s","","","","","","","","","","","","","","r","r","","","","","","","s","r","","","","","","","","r","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","","","","","","","r","","","","s","r","","","","","","","","","","","","","","r","r","","","","r","","","r","r","","","","","","","","r","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","","","","","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","s","","r","r","","r","r","r","r","r","s","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","s","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","r","","","","r","","","","","","","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","r","","r","","s","","s","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","r","s","r","","r","s","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","s","","r","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","r","","r","","","","","","","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","r","","","","","","","","","","","s","","","","","","","","","","","","","","r","r","","","","","","","s","r","","r","","","","","","","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","r","","","","","","","","","","s","r","","","","","","","","","","","","","","r","r","","","","r","","","r","r","","r","","","","","","","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","r","","","","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","s","r","r","r","","r","r","","r","r","s","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","r","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","","","s","","","","","","","","","","","","","","","","","","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","s","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","r","","r","","s","r","s","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","r","s","r","r","r","s","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","s","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","r","","r","","","r","","","","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","r","","","r","","","","","","","","s","","","","","","","","","","","","","","r","r","","","","","","","s","r","","r","","","r","","","","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","r","","","r","","","","","","","s","r","","","","","","","","","","","","","","r","r","","","","r","","","r","r","","r","","","r","","","","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","r","","","r","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","r","r","r","s","r","r","r","r","r","r","","r","r","s","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","s","","","","","","s","r","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","s","","","","","","","","r","","","","","","","","","","","","","","","","","","","","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","r","","","","","","","","r","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","","","","","","","r","","","","","s","","","","","","","","","","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","s","r","","","","","","","","r","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","","","","","","","r","","","","s","r","","","","","","","","","","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","r","","","r","r","","","","","","","","r","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","","","","","","","r","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","","","","","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","","","","","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","","","","","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","","","","","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","","","","","","s","","","s","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","r","","s","r","r","","","s","r","","r","s","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","","s","r","","r","s","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","s","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","r","","","","s","r","s","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","","s","r","r","r","s","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","s","","","","","","","","s","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","r","","","","","","","","r","","","","","r","","","r","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","","","","r","","","r","","","","","s","","","","","","","","","","","","","","r","r","","","","","","","s","r","","","","","r","","","r","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","","","","r","","","r","","","","s","r","","","","","","","","","","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","s","","r","r","r","r","r","r","r","r","s","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","s","","","","","","","","","","","","","","s","","","s","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","r","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","","","r","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","s","","r","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","r","","r","","","","","","","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","r","","","","","","","","","","","s","","","","","","","","","","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","s","r","","r","","","","","","","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","r","","","","","","","","","","s","r","","","","","","","","","","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","r","","","r","r","","r","","","","","","","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","r","","","","","","","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","r","","","","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","r","","","","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","r","","","","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","r","","","","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","","r","","s","r","r","","r","s","r","","r","s","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","r","s","r","","r","s","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","s","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","r","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","s","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","r","","r","","","r","","","","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","r","","","r","","","","","","","","s","","","","","","","","","","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","s","r","","r","","","r","","","","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","r","","","r","","","","","","","s","r","","","","","","","","","","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","r","","","r","r","","r","","","r","","","","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","r","","","r","","","","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","r","","","r","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","r","","","r","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","r","","","r","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","r","","","r","","","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","s","","","","","","s","","","s","","s","","","","","","","","","s","","","s","","","","","","","","","","","","s","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","r","","s","r","r","","r","s","r","r","r","s","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","r","s","r","r","r","s","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","s","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","s","","","","","","s","","","s","","s","","","","","","","","s","s","s","","s","s","s","","","s","s","s","","","","s","s","s","","","","","","s","","","s","","s","","","","","","","","s","s","s","","s","s","s","","","s","s","s","","","","s","s","","","","","","","","s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","r","","","r","","","","","","","","","","","","","","","","","","","","r","","","","","","","","r","","","","","r","","","r","","","","","","","","","","","","","","","","","","","s","r","","","","","","","","r","","","","","r","","","r","","","","","s","","","","","","","","","","","","","","r","r","","","","","","","s","r","","","","","r","","","r","","","","","r","","","","","","","","","","","","","","r","r","","","","s","","","r","r","","","","","r","","","r","","","","s","r","","","","","","","","","","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","s","s","","r","r","","","","","","","","s","s","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","","r","r","","","","","r","","","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","","s","r","r","r","s","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","s","r","r","","","s","r","r","r","s","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","r","","r","r","r","","r","r","r","r","r","r","","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","s","r","r","r","","","r","r","r","","","","r","r","","r","","r","r","r","","","r","r","r","r","r","r","r","r","","r","r","","","","","","","","r","r","","","","","r","r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","s","","","","","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r","s","","","","","","s","","","s","","s","","","","","","","","s","s","s","","s","s","s","","","s","s","s","","","","s","s","r","","","","","","r","","","r","","r","","","","","","","","r","r","r","","r","r","r","","","r","r","r","","","","r","r"};
int vi[11448] = {0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,13,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,0,0,6,0,6,0,0,0,0,0,0,0,6,6,6,0,6,6,6,0,0,6,6,6,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,25,26,27,0,42,43,5,0,0,44,6,45,0,0,0,46,47,0,0,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,67,0,0,0,0,0,0,0,0,0,0,0,68,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,5,0,0,0,0,0,5,0,0,5,0,5,0,0,0,0,0,0,0,5,5,5,0,5,5,5,0,0,5,5,5,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,63,63,63,0,0,63,63,0,63,63,63,63,63,0,63,63,0,0,0,0,0,0,0,63,63,0,0,0,0,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,47,47,0,0,0,88,0,89,0,47,47,47,0,47,47,0,0,0,0,0,0,0,47,47,0,0,0,0,47,47,0,0,0,48,0,85,48,48,0,0,86,48,0,48,87,48,48,48,0,48,48,0,0,0,0,0,0,0,48,48,0,0,0,0,48,48,0,0,0,51,0,51,51,51,0,0,51,51,0,51,51,51,51,51,0,51,51,0,0,0,0,0,0,0,51,51,0,0,0,0,51,51,0,0,0,55,0,55,55,55,0,0,55,55,0,55,55,55,55,55,0,55,55,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,31,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,33,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,33,33,0,0,0,0,0,0,77,35,0,0,0,0,0,0,0,35,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,0,0,0,79,0,0,37,37,0,0,0,0,0,0,0,37,0,0,0,80,37,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,0,0,0,39,0,0,39,39,0,0,0,0,0,0,0,39,81,82,0,39,39,0,0,0,0,0,0,0,83,84,0,0,0,0,39,39,0,0,0,42,0,0,42,42,0,0,0,0,0,0,0,42,42,42,0,42,42,0,0,0,0,0,0,0,42,42,0,0,0,0,42,42,0,0,0,62,0,62,62,62,72,0,62,62,0,62,62,62,62,62,73,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,20,0,0,21,0,22,0,69,0,0,0,0,0,0,26,0,0,42,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,67,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,0,63,0,63,63,63,0,63,63,63,0,63,63,0,63,63,0,63,63,0,0,0,0,0,0,0,63,63,0,0,0,0,63,63,0,0,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,47,47,0,47,0,155,0,156,0,0,47,47,0,47,47,0,0,0,0,0,0,0,47,47,0,0,0,0,47,47,0,0,0,48,0,152,48,48,0,48,153,48,0,48,154,0,48,48,0,48,48,0,0,0,0,0,0,0,48,48,0,0,0,0,48,48,0,0,0,51,0,51,51,51,0,51,51,51,0,51,51,0,51,51,0,51,51,0,0,0,0,0,0,0,51,51,0,0,0,0,51,51,0,0,0,55,0,55,55,55,0,55,55,55,0,55,55,0,55,55,0,55,55,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,0,0,0,0,131,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,31,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,31,0,0,0,0,0,0,0,33,0,33,0,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,33,33,0,0,0,0,0,0,136,35,0,35,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,0,0,0,140,0,0,37,37,0,37,0,0,0,0,0,0,0,0,0,141,37,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,0,0,0,39,0,0,39,39,0,39,0,0,0,0,0,0,142,143,0,39,39,0,0,0,0,0,0,0,144,145,0,0,0,0,39,39,0,0,0,42,0,0,42,42,0,42,0,0,0,0,0,0,42,42,0,42,42,0,0,0,0,0,0,0,42,42,0,0,0,0,42,42,0,0,0,62,0,62,62,62,129,62,62,62,0,62,62,0,62,62,130,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,25,0,0,25,0,25,0,0,0,0,0,0,0,25,25,25,0,25,25,25,0,0,25,25,25,0,0,0,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,101,0,0,0,0,0,102,19,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,121,0,0,0,0,0,0,0,0,0,0,0,122,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,42,0,0,0,0,0,0,0,0,0,0,0,47,23,0,0,0,0,0,23,0,0,23,0,23,0,0,0,0,0,0,0,23,23,23,0,23,23,23,0,0,23,23,23,0,0,0,23,23,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,0,26,0,0,93,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,15,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,17,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,56,56,56,0,0,56,56,0,56,56,56,56,56,0,56,56,0,0,0,0,0,0,0,56,56,0,0,0,0,56,56,0,0,0,62,0,62,62,62,72,0,62,62,0,62,62,62,62,62,0,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,57,0,57,57,57,0,0,57,57,0,57,57,57,57,57,0,57,57,0,0,0,0,0,0,0,57,57,0,0,0,0,57,57,0,0,0,58,0,58,58,58,0,0,58,58,0,58,58,58,58,58,0,58,58,0,0,0,0,0,0,0,58,58,0,0,0,0,58,58,0,0,0,59,0,59,59,59,0,0,59,59,0,59,59,59,59,59,0,59,59,0,0,0,0,0,0,0,59,59,0,0,0,0,59,59,0,0,67,0,0,0,0,0,67,0,0,67,0,67,0,0,0,0,0,0,0,67,67,67,0,67,67,67,0,0,67,67,67,0,0,0,67,67,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,67,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,67,0,0,0,0,0,0,0,0,0,0,0,68,68,0,0,0,0,0,68,0,0,68,0,68,0,0,0,0,0,0,0,68,68,68,0,68,68,68,0,0,68,68,68,0,0,0,68,68,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,67,0,0,0,0,0,0,0,0,0,0,0,68,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,0,63,0,63,63,63,0,63,63,63,63,63,63,0,63,63,0,63,63,0,0,0,0,0,0,0,63,63,0,0,0,0,63,63,0,0,0,0,0,0,0,0,0,22,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,47,47,0,47,0,222,47,223,0,0,47,47,0,47,47,0,0,0,0,0,0,0,47,47,0,0,0,0,47,47,0,0,0,48,0,219,48,48,0,48,220,48,48,48,221,0,48,48,0,48,48,0,0,0,0,0,0,0,48,48,0,0,0,0,48,48,0,0,0,51,0,51,51,51,0,51,51,51,51,51,51,0,51,51,0,51,51,0,0,0,0,0,0,0,51,51,0,0,0,0,51,51,0,0,0,55,0,55,55,55,0,55,55,55,55,55,55,0,55,55,0,55,55,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,28,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,0,0,0,0,0,0,0,198,0,29,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,31,0,31,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,31,0,0,0,0,0,0,0,33,0,33,0,0,33,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,33,33,0,0,0,0,0,0,203,35,0,35,0,0,35,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,0,0,0,207,0,0,37,37,0,37,0,0,37,0,0,0,0,0,0,208,37,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,0,0,0,39,0,0,39,39,0,39,0,0,39,0,0,0,209,210,0,39,39,0,0,0,0,0,0,0,211,212,0,0,0,0,39,39,0,0,0,42,0,0,42,42,0,42,0,0,42,0,0,0,42,42,0,42,42,0,0,0,0,0,0,0,42,42,0,0,0,0,42,42,0,0,0,0,0,0,0,0,0,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,62,62,62,195,62,62,62,62,62,62,0,62,62,196,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,24,0,0,0,0,0,24,0,0,24,0,24,0,0,0,0,0,0,0,24,24,24,0,24,24,24,0,0,24,24,24,0,0,0,24,24,101,0,0,0,0,0,102,19,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,121,0,0,0,0,0,0,0,0,0,0,0,122,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,67,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,75,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,32,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,34,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,77,36,0,0,0,0,0,0,0,36,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,0,0,0,79,0,0,38,38,0,0,0,0,0,0,0,38,0,0,0,80,38,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,0,41,0,0,41,41,0,0,0,0,0,0,0,41,81,82,0,41,41,0,0,0,0,0,0,0,83,84,0,0,0,0,41,41,0,0,0,40,0,0,40,40,0,0,0,0,0,0,0,40,81,82,0,40,40,0,0,0,0,0,0,0,83,84,0,0,0,0,40,40,0,0,0,43,0,0,43,43,0,0,0,0,0,0,0,43,43,43,0,43,43,0,0,0,0,0,0,0,43,43,0,0,0,0,43,43,0,0,0,44,0,0,44,44,0,0,0,0,0,0,0,44,44,44,0,44,44,0,0,0,0,0,0,0,44,44,0,0,0,0,44,44,0,0,0,46,0,0,46,46,0,0,0,0,0,0,0,46,46,46,0,46,46,0,0,0,0,0,0,0,46,46,0,0,0,0,46,46,0,0,0,45,0,0,45,45,0,0,0,0,0,0,0,45,45,45,0,45,45,0,0,0,0,0,0,0,45,45,0,0,0,0,45,45,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,165,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,224,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,192,0,0,0,0,0,0,0,0,0,0,0,193,0,50,0,85,50,50,0,0,86,50,0,50,87,50,50,50,0,50,50,0,0,0,0,0,0,0,50,50,0,0,0,0,50,50,0,0,0,49,0,85,49,49,0,0,86,49,0,49,87,49,49,49,0,49,49,0,0,0,0,0,0,0,49,49,0,0,0,0,49,49,0,0,0,52,0,52,52,52,0,0,52,52,0,52,52,52,52,52,0,52,52,0,0,0,0,0,0,0,52,52,0,0,0,0,52,52,0,0,0,53,0,53,53,53,0,0,53,53,0,53,53,53,53,53,0,53,53,0,0,0,0,0,0,0,53,53,0,0,0,0,53,53,0,0,0,54,0,54,54,54,0,0,54,54,0,54,54,54,54,54,0,54,54,0,0,0,0,0,0,0,54,54,0,0,0,0,54,54,0,0,0,56,0,56,56,56,0,56,56,56,0,56,56,0,56,56,0,56,56,0,0,0,0,0,0,0,56,56,0,0,0,0,56,56,0,0,0,62,0,62,62,62,129,62,62,62,0,62,62,0,62,62,0,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,57,0,57,57,57,0,57,57,57,0,57,57,0,57,57,0,57,57,0,0,0,0,0,0,0,57,57,0,0,0,0,57,57,0,0,0,58,0,58,58,58,0,58,58,58,0,58,58,0,58,58,0,58,58,0,0,0,0,0,0,0,58,58,0,0,0,0,58,58,0,0,0,59,0,59,59,59,0,59,59,59,0,59,59,0,59,59,0,59,59,0,0,0,0,0,0,0,59,59,0,0,0,0,59,59,0,0,0,60,0,60,60,60,0,0,60,60,0,60,60,60,60,60,0,60,60,0,0,0,0,0,0,0,60,60,0,0,0,0,60,60,0,0,0,0,0,0,0,0,0,285,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,284,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,0,50,0,51,0,0,0,0,0,0,0,0,52,0,0,67,0,0,0,0,0,0,0,0,0,0,0,68,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,0,63,0,63,63,63,0,0,63,63,63,63,63,63,63,63,0,63,63,0,0,0,0,0,0,0,63,63,0,0,0,0,63,63,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,47,47,0,0,0,270,47,271,0,47,47,47,0,47,47,0,0,0,0,0,0,0,47,47,0,0,0,0,47,47,0,0,0,48,0,267,48,48,0,0,268,48,48,48,269,48,48,48,0,48,48,0,0,0,0,0,0,0,48,48,0,0,0,0,48,48,0,0,0,51,0,51,51,51,0,0,51,51,51,51,51,51,51,51,0,51,51,0,0,0,0,0,0,0,51,51,0,0,0,0,51,51,0,0,0,55,0,55,55,55,0,0,55,55,55,55,55,55,55,55,0,55,55,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,246,0,0,0,0,29,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,31,0,0,0,0,31,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,31,0,0,0,0,0,0,0,33,0,0,0,0,33,0,0,33,0,0,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,33,33,0,0,0,0,0,0,251,35,0,0,0,0,35,0,0,35,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,0,0,0,255,0,0,37,37,0,0,0,0,37,0,0,37,0,0,0,256,37,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,0,0,0,39,0,0,39,39,0,0,0,0,39,0,0,39,257,258,0,39,39,0,0,0,0,0,0,0,259,260,0,0,0,0,39,39,0,0,0,42,0,0,42,42,0,0,0,0,42,0,0,42,42,42,0,42,42,0,0,0,0,0,0,0,42,42,0,0,0,0,42,42,0,0,0,62,0,62,62,62,244,0,62,62,62,62,62,62,62,62,245,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,0,0,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,19,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,121,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,121,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,20,0,0,272,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,131,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,32,0,0,0,0,0,0,0,34,0,34,0,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,0,0,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,136,36,0,36,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,0,0,0,140,0,0,38,38,0,38,0,0,0,0,0,0,0,0,0,141,38,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,0,0,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,0,41,0,0,41,41,0,41,0,0,0,0,0,0,142,143,0,41,41,0,0,0,0,0,0,0,144,145,0,0,0,0,41,41,0,0,0,40,0,0,40,40,0,40,0,0,0,0,0,0,142,143,0,40,40,0,0,0,0,0,0,0,144,145,0,0,0,0,40,40,0,0,0,43,0,0,43,43,0,43,0,0,0,0,0,0,43,43,0,43,43,0,0,0,0,0,0,0,43,43,0,0,0,0,43,43,0,0,0,44,0,0,44,44,0,44,0,0,0,0,0,0,44,44,0,44,44,0,0,0,0,0,0,0,44,44,0,0,0,0,44,44,0,0,0,46,0,0,46,46,0,46,0,0,0,0,0,0,46,46,0,46,46,0,0,0,0,0,0,0,46,46,0,0,0,0,46,46,0,0,0,45,0,0,45,45,0,45,0,0,0,0,0,0,45,45,0,45,45,0,0,0,0,0,0,0,45,45,0,0,0,0,45,45,0,0,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,232,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,14,0,0,14,0,14,0,0,0,0,0,0,0,14,14,14,0,14,14,14,0,0,14,14,14,0,0,0,14,14,0,50,0,152,50,50,0,50,153,50,0,50,154,0,50,50,0,50,50,0,0,0,0,0,0,0,50,50,0,0,0,0,50,50,0,0,0,49,0,152,49,49,0,49,153,49,0,49,154,0,49,49,0,49,49,0,0,0,0,0,0,0,49,49,0,0,0,0,49,49,0,0,0,52,0,52,52,52,0,52,52,52,0,52,52,0,52,52,0,52,52,0,0,0,0,0,0,0,52,52,0,0,0,0,52,52,0,0,0,53,0,53,53,53,0,53,53,53,0,53,53,0,53,53,0,53,53,0,0,0,0,0,0,0,53,53,0,0,0,0,53,53,0,0,0,54,0,54,54,54,0,54,54,54,0,54,54,0,54,54,0,54,54,0,0,0,0,0,0,0,54,54,0,0,0,0,54,54,0,0,0,56,0,56,56,56,0,56,56,56,56,56,56,0,56,56,0,56,56,0,0,0,0,0,0,0,56,56,0,0,0,0,56,56,0,0,0,62,0,62,62,62,195,62,62,62,62,62,62,0,62,62,0,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,57,0,57,57,57,0,57,57,57,57,57,57,0,57,57,0,57,57,0,0,0,0,0,0,0,57,57,0,0,0,0,57,57,0,0,0,58,0,58,58,58,0,58,58,58,58,58,58,0,58,58,0,58,58,0,0,0,0,0,0,0,58,58,0,0,0,0,58,58,0,0,0,59,0,59,59,59,0,59,59,59,59,59,59,0,59,59,0,59,59,0,0,0,0,0,0,0,59,59,0,0,0,0,59,59,0,0,0,60,0,60,60,60,0,60,60,60,0,60,60,0,60,60,0,60,60,0,0,0,0,0,0,0,60,60,0,0,0,0,60,60,0,0,0,61,0,61,61,61,0,0,61,61,0,61,61,61,61,61,0,61,61,0,0,0,0,0,0,0,61,61,0,0,0,0,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,287,0,0,0,0,0,0,0,0,0,0,0,27,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,309,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,101,0,0,0,0,0,102,19,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,121,0,0,0,0,0,0,0,0,0,0,0,122,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,192,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,0,0,0,0,0,198,0,30,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,0,0,0,0,0,32,0,32,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,32,0,0,0,0,0,0,0,34,0,34,0,0,34,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,0,0,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,0,0,0,0,203,36,0,36,0,0,36,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,0,0,0,207,0,0,38,38,0,38,0,0,38,0,0,0,0,0,0,208,38,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,0,0,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,0,41,0,0,41,41,0,41,0,0,41,0,0,0,209,210,0,41,41,0,0,0,0,0,0,0,211,212,0,0,0,0,41,41,0,0,0,40,0,0,40,40,0,40,0,0,40,0,0,0,209,210,0,40,40,0,0,0,0,0,0,0,211,212,0,0,0,0,40,40,0,0,0,43,0,0,43,43,0,43,0,0,43,0,0,0,43,43,0,43,43,0,0,0,0,0,0,0,43,43,0,0,0,0,43,43,0,0,0,44,0,0,44,44,0,44,0,0,44,0,0,0,44,44,0,44,44,0,0,0,0,0,0,0,44,44,0,0,0,0,44,44,0,0,0,46,0,0,46,46,0,46,0,0,46,0,0,0,46,46,0,46,46,0,0,0,0,0,0,0,46,46,0,0,0,0,46,46,0,0,0,45,0,0,45,45,0,45,0,0,45,0,0,0,45,45,0,45,45,0,0,0,0,0,0,0,45,45,0,0,0,0,45,45,0,0,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,173,0,0,0,0,0,174,0,0,175,0,176,0,0,0,0,0,0,0,0,177,0,0,280,0,0,0,0,0,0,0,0,0,0,0,193,101,0,0,0,0,0,102,0,0,103,0,104,0,0,0,0,0,0,0,0,105,0,0,121,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,16,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,219,50,50,0,50,220,50,50,50,221,0,50,50,0,50,50,0,0,0,0,0,0,0,50,50,0,0,0,0,50,50,0,0,0,49,0,219,49,49,0,49,220,49,49,49,221,0,49,49,0,49,49,0,0,0,0,0,0,0,49,49,0,0,0,0,49,49,0,0,0,52,0,52,52,52,0,52,52,52,52,52,52,0,52,52,0,52,52,0,0,0,0,0,0,0,52,52,0,0,0,0,52,52,0,0,0,53,0,53,53,53,0,53,53,53,53,53,53,0,53,53,0,53,53,0,0,0,0,0,0,0,53,53,0,0,0,0,53,53,0,0,0,54,0,54,54,54,0,54,54,54,54,54,54,0,54,54,0,54,54,0,0,0,0,0,0,0,54,54,0,0,0,0,54,54,0,0,0,56,0,56,56,56,0,0,56,56,56,56,56,56,56,56,0,56,56,0,0,0,0,0,0,0,56,56,0,0,0,0,56,56,0,0,0,62,0,62,62,62,244,0,62,62,62,62,62,62,62,62,0,62,62,0,0,0,0,0,0,0,62,62,0,0,0,0,62,62,0,0,0,57,0,57,57,57,0,0,57,57,57,57,57,57,57,57,0,57,57,0,0,0,0,0,0,0,57,57,0,0,0,0,57,57,0,0,0,58,0,58,58,58,0,0,58,58,58,58,58,58,58,58,0,58,58,0,0,0,0,0,0,0,58,58,0,0,0,0,58,58,0,0,0,59,0,59,59,59,0,0,59,59,59,59,59,59,59,59,0,59,59,0,0,0,0,0,0,0,59,59,0,0,0,0,59,59,0,0,0,60,0,60,60,60,0,60,60,60,60,60,60,0,60,60,0,60,60,0,0,0,0,0,0,0,60,60,0,0,0,0,60,60,0,0,0,61,0,61,61,61,0,61,61,61,0,61,61,0,61,61,0,61,61,0,0,0,0,0,0,0,61,61,0,0,0,0,61,61,0,0,6,0,0,0,0,0,6,0,0,6,0,6,0,0,0,0,0,0,0,6,6,6,0,6,6,6,0,0,6,6,6,0,0,0,6,6,6,0,0,0,0,0,6,0,0,6,0,6,0,0,0,0,0,0,0,6,6,6,0,6,6,6,0,0,6,6,6,0,0,0,6,6,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,25,26,27,0,42,43,5,0,0,44,6,45,0,0,0,311,47,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,25,26,27,0,42,43,5,0,0,44,6,45,0,0,0,312,47,0,0,0,0,0,0,0,313,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,0,0,0,30,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,32,0,0,0,0,32,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,32,0,0,0,0,0,0,0,34,0,0,0,0,34,0,0,34,0,0,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,0,0,0,0,0,0,251,36,0,0,0,0,36,0,0,36,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,0,0,0,255,0,0,38,38,0,0,0,0,38,0,0,38,0,0,0,256,38,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,0,0,0,41,0,0,41,41,0,0,0,0,41,0,0,41,257,258,0,41,41,0,0,0,0,0,0,0,259,260,0,0,0,0,41,41,0,0,0,40,0,0,40,40,0,0,0,0,40,0,0,40,257,258,0,40,40,0,0,0,0,0,0,0,259,260,0,0,0,0,40,40,0,0,0,43,0,0,43,43,0,0,0,0,43,0,0,43,43,43,0,43,43,0,0,0,0,0,0,0,43,43,0,0,0,0,43,43,0,0,0,44,0,0,44,44,0,0,0,0,44,0,0,44,44,44,0,44,44,0,0,0,0,0,0,0,44,44,0,0,0,0,44,44,0,0,0,46,0,0,46,46,0,0,0,0,46,0,0,46,46,46,0,46,46,0,0,0,0,0,0,0,46,46,0,0,0,0,46,46,0,0,0,45,0,0,45,45,0,0,0,0,45,0,0,45,45,45,0,45,45,0,0,0,0,0,0,0,45,45,0,0,0,0,45,45,0,0,0,50,0,267,50,50,0,0,268,50,50,50,269,50,50,50,0,50,50,0,0,0,0,0,0,0,50,50,0,0,0,0,50,50,0,0,0,49,0,267,49,49,0,0,268,49,49,49,269,49,49,49,0,49,49,0,0,0,0,0,0,0,49,49,0,0,0,0,49,49,0,0,0,52,0,52,52,52,0,0,52,52,52,52,52,52,52,52,0,52,52,0,0,0,0,0,0,0,52,52,0,0,0,0,52,52,0,0,0,53,0,53,53,53,0,0,53,53,53,53,53,53,53,53,0,53,53,0,0,0,0,0,0,0,53,53,0,0,0,0,53,53,0,0,0,54,0,54,54,54,0,0,54,54,54,54,54,54,54,54,0,54,54,0,0,0,0,0,0,0,54,54,0,0,0,0,54,54,0,0,0,60,0,60,60,60,0,0,60,60,60,60,60,60,60,60,0,60,60,0,0,0,0,0,0,0,60,60,0,0,0,0,60,60,0,0,0,61,0,61,61,61,0,61,61,61,61,61,61,0,61,61,0,61,61,0,0,0,0,0,0,0,61,61,0,0,0,0,61,61,0,0,66,0,0,0,0,0,66,0,0,66,0,66,0,0,0,0,0,0,0,66,66,66,0,66,66,66,0,0,66,66,66,0,0,0,66,66,64,0,0,0,0,0,64,0,0,64,0,64,0,0,0,0,0,0,0,64,64,64,314,64,64,64,0,0,64,64,64,0,0,0,64,64,0,61,0,61,61,61,0,0,61,61,61,61,61,61,61,61,0,61,61,0,0,0,0,0,0,0,61,61,0,0,0,0,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,315,0,0,0,0,6,0,0,0,0,0,6,0,0,6,0,6,0,0,0,0,0,0,0,6,6,6,0,6,6,6,0,0,6,6,6,0,0,0,6,6,19,0,0,0,0,0,20,0,0,21,0,22,0,0,0,0,0,0,0,25,26,27,0,42,43,5,0,0,44,6,45,0,0,0,317,47,65,0,0,0,0,0,65,0,0,65,0,65,0,0,0,0,0,0,0,65,65,65,0,65,65,65,0,0,65,65,65,0,0,0,65,65};
for (int i = 0; i < ACTION.size(); i++){for(string ter:ters){ACTION[i][ter].first = vs[t];ACTION[i][ter].second=vi[t];t++;} }
GOTO = vector<map<string,int> >(318,map<string,int>());
t=0;
int vi2[8904] = {-1,-1,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,-1,-1,-1,-1,-1,-1,-1,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,-1,-1,-1,-1,-1,-1,-1,-1,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,24,-1,-1,28,29,30,31,32,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,96,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,92,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,94,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,90,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,70,29,30,31,32,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,168,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,123,54,55,56,57,58,59,60,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,164,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,166,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,167,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,132,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,126,29,30,31,32,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,134,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,135,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,-1,139,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,138,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,-1,-1,146,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,-1,-1,147,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,-1,-1,-1,149,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,-1,-1,-1,150,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,-1,-1,-1,151,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,31,32,33,-1,-1,-1,-1,-1,-1,-1,148,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,163,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,161,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,162,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,160,32,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,159,32,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,157,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,124,54,55,56,57,58,59,60,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,125,54,55,56,57,58,59,60,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,235,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,172,54,55,56,57,58,59,60,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,231,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,233,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,197,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,234,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,199,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,106,107,108,109,110,111,112,113,114,115,116,117,118,119,170,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,171,54,55,56,57,58,59,60,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,201,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,202,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,-1,206,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,205,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,-1,-1,213,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,-1,-1,214,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,-1,-1,-1,216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,-1,-1,-1,217,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,-1,-1,-1,218,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,56,57,58,-1,-1,-1,-1,-1,-1,-1,215,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,230,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,228,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,229,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,227,57,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,226,57,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,178,179,180,181,182,183,184,185,186,187,188,189,190,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,283,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,242,54,55,56,57,58,59,60,61,62,63,64,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,279,183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,281,183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,247,114,115,116,117,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,106,107,108,109,110,111,112,113,114,115,116,117,118,119,241,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,240,107,108,109,110,111,112,113,114,115,116,117,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,249,115,116,117,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,250,116,117,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,-1,254,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,253,117,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,-1,-1,261,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,-1,-1,262,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,-1,-1,-1,264,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,-1,-1,-1,265,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,-1,-1,-1,266,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,109,110,111,-1,-1,-1,-1,-1,-1,-1,263,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,278,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,276,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,277,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,275,110,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,274,110,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,273,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,293,186,187,188,189,190,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,106,107,108,109,110,111,112,113,114,115,116,117,118,119,290,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,292,179,180,181,182,183,184,185,186,187,188,189,190,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,294,187,188,189,190,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,295,188,189,190,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,-1,297,190,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,296,189,190,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,-1,-1,298,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,-1,-1,299,191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,-1,-1,-1,301,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,-1,-1,-1,302,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,-1,-1,-1,303,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,180,181,182,183,-1,-1,-1,-1,-1,-1,-1,300,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,308,183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,306,183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,307,183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,305,182,183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,304,182,183,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,291,107,108,109,110,111,112,113,114,115,116,117,118,119,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,288,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,289,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,24,-1,-1,28,29,30,31,32,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,24,-1,-1,28,29,30,31,32,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,316,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,24,-1,-1,28,29,30,31,32,33,34,35,36,37,38,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
for (int i = 0; i < GOTO.size(); i++){for(string non:nons){GOTO[i][non]=vi2[t++];} }

}
SynAnalyzer::SynAnalyzer(NonTerminal* start, vector<Generator*>& gens) {
    //初始化栈，否则会越位
    stack_state[0] = 0;
    stack_t = 1;
    //产生式
    this->gens = gens;
    this->start = start;
    initFirstSet(gens);
    initFollowSet(start, gens);
    // printFirstSet();
    // printFollowSet();
    getLR1();
}

void SynAnalyzer::initFirstSet(vector<Generator*>& gens) {
    //求FIRST集
    while (1) {
        bool isChange = false;//记录是否改变
        //for 1
        for (Generator* gen : gens) {
            string left = gen->left->name;
            bool all_empty = true;//是否可空
            //for 2
            for (GeneratorItem* item : gen->right) {//顺着产生式扫描
                //如果遇到终结符，加入FIRST集并终止
                if (item->type == "ter") {
                    all_empty = false;//非空
                    isChange |= FirstSet[left].insert(item->c_ter->name).second;//第二个位置记录是否插入成功
                    break;
                }
                //如果遇到非终结符，将它的FIRST的非空符号加入，如果它不含空，则终止
                else if (item->type == "non") {//非终结符
                    bool hasEmpty = false;
                    //for 3
                    for (string ter : FirstSet[item->c_non->name]) {//遍历这个终结符的FIRST集
                        if (ter == "empty") {//可空
                            hasEmpty = true;//记录之后跳过
                        }
                        else {
                            isChange |= FirstSet[left].insert(ter).second;//否则加入集合
                        }
                    }
                    //for 3 end
                    if (!hasEmpty) {
                        all_empty = false;
                        break;//如果非空，停止
                    }
                }
                else if (item->type == "act") {//跳过语义动作
                    continue;
                }
            }
            //for 2 end
            //如果整个产生式都为空，则将空加入
            if (all_empty) {
                isChange |= FirstSet[left].insert("empty").second;
            }
        }
        //for 1 end
        if (!isChange)break;
    }
}

void SynAnalyzer::printFirstSet() {
    cout << "-----------------------------------------\nFIRST:\n";
    for (auto item : FirstSet) {
        cout << item.first << ":";
        for (string first : item.second) {
            cout << first << ", ";
        }
        cout << endl;
    }
    cout << "-----------------------------------------\n";
}

set<string> SynAnalyzer::getFirst(Generator* gen, int s) {
    set<string> ans;
    bool all_empty = true;
    for (int i = s;i < gen->right.size();i++) {
        GeneratorItem* item = gen->right[i];
        if (item->type == "act") {
            continue;
        }
        else if (item->type == "ter") {
            ans.insert(item->c_ter->name);
            all_empty = false;
            break;
        }
        else if (item->type == "non") {
            bool hasEmpty = false;
            //for 1
            for (string ter : FirstSet[item->c_non->name]) {
                if (ter != "empty") {
                    ans.insert(ter);
                }
                else {
                    hasEmpty = true;
                }
            }
            //for 1 end
            if (!hasEmpty) {
                all_empty = false;
                break;
            }
        }
    }
    if (all_empty) {
        ans.insert("empty");
    }
    return ans;
}

void SynAnalyzer::initFollowSet(NonTerminal* start, vector<Generator*> gens) {
    //求FOLLOW集
    FollowSet[start->name].insert("$");
    while (1) {
        bool isChanged = false;
        //for 1
        for (Generator* gen : gens) {
            //for 2
            for (int i = 0;i < gen->right.size();i++) {
                if (gen->right[i]->type == "non") {
                    set<string> afterFIRST = getFirst(gen, i + 1);
                    bool hasEmpty = false;
                    //加入后续符号串的FIRST
                    for (string ter : afterFIRST) {
                        if (ter == "empty") {
                            hasEmpty = true;
                        }
                        else {
                            isChanged |= FollowSet[gen->right[i]->c_non->name].insert(ter).second;
                        }
                    }
                    //有空或者在末尾
                    if (hasEmpty) {
                        for (string ter : FollowSet[gen->left->name]) {
                            isChanged |= FollowSet[gen->right[i]->c_non->name].insert(ter).second;
                        }
                    }
                }
            }
        }
        if (!isChanged) break;
    }
}

void SynAnalyzer::printFollowSet() {
    cout << "-----------------------------------------\nFOLLOW:\n";
    for (auto item : FollowSet) {
        cout << item.first << ":";
        for (string follow : item.second) {
            cout << follow << ", ";
        }
        cout << endl;
    }
    cout << "-----------------------------------------\n";
}

//----------------------------------------------------------------------
void SynAnalyzer::printItemSet(set<LRItem> items) {
    cout << "----------------------\nItemSet:" << item_set_no[items] << "\n";
    for (LRItem item : items) {
        item.print();
        cout << endl;
    }
    cout << "----------------------\n";
}

set<LRItem> SynAnalyzer::closureLR1(set<LRItem> items) {
    // cout << items.size()<<"->";
    set<LRItem> ans = items, not_visit = items;
    while (not_visit.size() != 0) {
        // cout << "-------------\n";
        set<LRItem> news;
        for (LRItem item : not_visit) {
            // item.print();
            // cout << "\n";
            if (item.gen->right.size() == item.point) continue;//规约
            //如果是待约项，获取待约符号的后续首符，如果含空，则把空提出，把当前的向前看符号加入
            if (item.gen->right[item.point]->type == "non") {
                set<string> afterFirst = getFirst(item.gen, item.point + 1);
                if (afterFirst.count("empty")) {
                    for (string s : item.look_forwards) {
                        afterFirst.insert(s);
                    }
                    afterFirst.erase("empty");
                }
                for (Generator* gen : gens) {
                    //对于该符号的每一个产生式、afterfirst中的每一个向前看符号，产生新的项目
                    //注意这里每个向前看符号单独存储，否则，一个Item会代表多个核心相同但向前看符号不同的项目；
                    //如果一个项目集有这类项目，则可能由于划分不同，导致set将本来相同的项目集识别为不同
                    //举例：{[P,a],[P,b],[P,c]}可以为{[P,a|b],[P,c]}，也可以为{[P,a],[P,b|c]}，set是无法识别的
                    if (gen->left->name == item.gen->right[item.point]->c_non->name) {
                        for (string ter : afterFirst) {
                            set<string> tmp;
                            tmp.insert(ter);
                            if (ans.insert(LRItem(gen, 0, tmp)).second) {
                                news.insert(LRItem(gen, 0, tmp));
                            }
                        }
                    }
                }
            }
        }
        //重置not_visit
        not_visit = news;
        // cout << "--------------------\n";
    }
    // cout << ans.size() << endl;
    return ans;
}

set<LRItem> SynAnalyzer::GoLR1(set<LRItem> items, string input) {
    set<LRItem> ans;
    //检查每一个项目，如果能够接受输入，则创建对应的新项目，加入集合，然后返回其闭包
    for (LRItem item : items) {
        if (item.point == item.gen->right.size()) continue;
        GeneratorItem* g_item = item.gen->right[item.point];
        if ((g_item->type == "ter" && g_item->c_ter->name == input)
            || (g_item->type == "non" && g_item->c_non->name == input)) {
            ans.insert(LRItem(item.gen, item.point + 1, item.look_forwards));
        }
    }
    return closureLR1(ans);
}

void SynAnalyzer::getLR1() {
    //记录符号
    for (int i = 0;i < gens.size();i++) {
        Generator* gen = gens[i];
        gens_no[gen] = i;
        nons.insert(gen->left->name);
        for (GeneratorItem* item : gen->right) {
            if (item->type == "ter") {
                ters.insert(item->c_ter->name);
            }
        }
    }
    ters.insert("$");
    //初始化
    //创建了一个项目集
    set<string> tmp;
    tmp.insert("$");
    LRItem tmpitem(gens[0], 0, tmp);
    set<LRItem> ini;
    ini.insert(tmpitem);
    ini = closureLR1(ini);
    //设置编号
    item_set_no[ini] = 0;
    no_reverse[0] = ini;
    item_set_count = 1;
    //放入项目集集合
    C.insert(ini);
    GO.push_back(map<string, int>());
    // cout << "getLR1-init-over\n";
    
    //求GO和项目集
    set<set<LRItem> > not_visit = C;
    set<string> symbol = ters;
    symbol.insert(nons.begin(), nons.end());//把终结符和非终结符合并
    //对于没有访问过的项目集，对每一个输入符号求GO
    while (not_visit.size() != 0) {
        set<set<LRItem> > news;
        for (set<LRItem> item_set : not_visit) {
            int no = item_set_no[item_set];
            for (string input : symbol) {
                set<LRItem> tmp = GoLR1(item_set, input);

                if (tmp.size() == 0) {
                    GO[no][input] = -1;
                }
                else {
                    //如果是新的项目集，记录编号，增加它的GO对应行
                    if (C.insert(tmp).second) {
                        news.insert(tmp);
                        item_set_no[tmp] = item_set_count;
                        no_reverse[item_set_count] = tmp;
                        item_set_count++;
                        GO.push_back(map<string, int>());
                    }
                    //记录GO函数
                    GO[no][input] = item_set_no[tmp];
                }
            }
        }
        not_visit = news;
    }

    //处理每个项目集，构建ACTION和GOTO表
    ACTION = vector < map<string, pair<string, int> > >(item_set_count, map<string, pair<string, int> >());
    GOTO = vector < map<string, int > >(item_set_count, map<string, int>());
    for (set<LRItem> item_set : C) {
        int no = item_set_no[item_set];
        //ACTION
        for (LRItem item : item_set) {
            //规约
            if (item.point == item.gen->right.size()) {
                for (string input : item.look_forwards) {
                    if (ACTION[no][input].first == "r"
                        || ACTION[no][input].first == "s") {
                        cout << "冲突: r-" << ACTION[no][input].first << "\n";
                        return;
                    }
                    else {
                        if (gens_no[item.gen] == 0) {
                            ACTION[no][input].first = "acc";
                        }
                        else {
                            ACTION[no][input].first = "r";
                        }
                        ACTION[no][input].second = gens_no[item.gen];
                    }
                }
            }
            //移入
            else if (item.gen->right[item.point]->type == "ter") {
                string input = item.gen->right[item.point]->c_ter->name;
                if (ACTION[no][input].first == "r") {
                    cout << "冲突: r-s\n";
                    return;
                }
                else {
                    ACTION[no][input].first = "s";
                    ACTION[no][input].second = GO[no][input];
                }
            }
        }
        //GOTO
        for (string input : nons) {
            GOTO[no][input] = GO[no][input];
        }
    }
}

void SynAnalyzer::input(Word input) {
    Terminal input_t(input.type, input.value);
    pair<string, int> action = ACTION[stack_state[stack_t - 1]][input_t.name];//获取动作

    //test
    // cout << stack_state[stack_t - 1] << ":";
    // cout << action.first << "," << action.second << endl;
    //test end

    if (action.first == "s") {

        //test
        // input.testPrint();
        //test end

        //移进，移入栈，创建叶子节点
        stack_state[stack_t] = action.second;
        stack_pointer[stack_t] = new SynTree();
        stack_pointer[stack_t]->type = "ter";
        stack_pointer[stack_t]->name = input_t.name;//词法名
        stack_pointer[stack_t]->attrs["value"] = input_t.value;
        stack_t++;
    }
    else if (action.first == "r") {
        //规约
        //获取产生式，得到栈中第一个位置
        Generator* gen = gens[action.second];
        int base = stack_t - gen->len;//这个len只计算文法符号的个数

        //Test
        // cout << stack_t << "-" << gen->len << "=" << base << endl;
        // cout << "[" << gen->left->name << "],";
        // cout << stack_state[base - 1] << "->" << GO[stack_state[base - 1]][gen->left->name] << endl;
        //Test end

        //创建新的根节点
        SynTree* tmp = new SynTree();
        tmp->type = "non";
        tmp->name = gen->left->name;
        //根据产生式进行处理，连接叶子节点
        int count = 0;//记录当前是第几个文法符号
        for (GeneratorItem* item : gen->right) {
            //如果是文法符号，从栈中取得指针
            if (item->type == "ter" || item->type == "non") {
                tmp->sons.push_back(stack_pointer[base + count]);
                count++;
            }
            //如果是其他，创建新节点
            else if (item->type == "act") {
                SynTree* tmp2 = new SynTree();
                tmp2->attrs["acts"] = item->c_act->actions;
                tmp2->type = "act";
                tmp2->name = "act";
                tmp->sons.push_back(tmp2);
            }
        }
        //查询GOTO表，基准是base的前一个，新的符号是左部，然后放入base的位置
        int _goto = GOTO[stack_state[base - 1]][gen->left->name];
        stack_state[base] = _goto;
        stack_pointer[base] = tmp;
        stack_t = base + 1;
        this->input(input);//由于没有移入，所以重新调用
    }
    else if (action.first == "acc") {
        //把栈中指针作为根结点,开始扫描树
        scan(stack_pointer[stack_t - 1]);
        return;
    }
}

void SynAnalyzer::printGotoAction() {
    cout << "-------------------------\nACTION:\n";
    for (int i = 0;i < item_set_count;i++) {
        // for (LRItem item : no_reverse[i]) {
        //     item.print();
        //     cout << endl;
        // }
        cout << "(" << i << ")";
        for (string ter : ters) {
            cout << "[" << ter << ": " << ACTION[i][ter].first << ACTION[i][ter].second << "], ";
        }
        cout << endl;
        cout << endl;
    }
    cout << "-------------------------\nGOTO:\n";
    for (int i = 0;i < item_set_count;i++) {
        for (string non : nons) {
            cout << "[" << non << ": " << GOTO[i][non] << "], ";
        }
        cout << endl;
    }
}

SynTree* SynAnalyzer::getTarget(SynTree* root, string id) {
    if (id == "-1") {
        return root;
    }
    return root->sons[stringToLL(id)];
}

void SynAnalyzer::scan(SynTree* root) {
    //test
    // cout << "------------------------------------\n";
    // cout << root->type << ":" << root->name << " " << root->sons.size() << endl;
    // cout << root->attrs["code"] << endl;
    //test end

    for (SynTree* son : root->sons) {
        //如果是非终结符或者终结符，进入子树扫描
        if (son->type == "ter" || son->type == "non") {
            scan(son);
        }
        //如果是语义动作，由于涉及根节点，在当前节点扫描
        else if (son->type == "act") {
            //分割命令
            char temp[200];
            int t = 0;
            int id = 0;
            string acts = son->attrs["acts"];
            while (id < acts.size()) {
                temp[t++] = acts[id++];
                if (acts[id - 1] == ';' && t != 1) {
                    temp[t] = '\0';
                    t = 0;
                    Command cmd(temp);

                    // test
                    // cmd.print();
                    // test end

                    //处理命令
                    if (cmd.args[0] == "createD") {
                        //(1)createD $i $j
                        //为 $j.D 新建一个父定义域为 $i.D 的定义域, $i 可以为NULL
                        //取出父定义域参数
                        Dspace* fa;
                        if (cmd.args[1] == "NULL") {
                            fa = NULL;
                        }
                        else {
                            fa = Dmap[getTarget(root, cmd.args[1])->attrs["D"]];
                        }
                        //取出目标,创建定义域
                        SynTree* target = getTarget(root, cmd.args[2]);
                        target->attrs["D"] = to_string(D_count++);
                        Dmap[target->attrs["D"]] = new Dspace(fa);
                        Dmap[target->attrs["D"]]->name = target->attrs["D"];
                    }
                    else if (cmd.args[0] == "claimFun") {
                        //(2.1)Funclaim $d <D> $i <T> $j <name> $k <argByte>
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        D->claimFun(
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]],
                            getTarget(root, cmd.args[5])->attrs[cmd.args[6]],
                            getTarget(root, cmd.args[7])->attrs[cmd.args[8]]
                        );
                    }
                    else if (cmd.args[0] == "defFun") {
                        // (2.2)Fundef $d <D> $j <name> $k <varByte> $l <code>
                        // 定义 在定义域"d.D"中名为$j.name的函数，需要变量空间为 $k.argByte， 汇编代码存入$l.code
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        getTarget(root, cmd.args[7])->attrs[cmd.args[8]] = D->defFun(
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]],
                            getTarget(root, cmd.args[5])->attrs[cmd.args[6]]
                        );
                    }
                    else if (cmd.args[0] == "createVar") {
                        //(3)createVar $i <D> $j <T> $k <name>
                        //在$i.D中创建类型为$j.T，名为$k.name的变量
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        D->createVar(
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]],
                            getTarget(root, cmd.args[5])->attrs[cmd.args[6]]
                        );
                    }
                    else if (cmd.args[0] == "createArg") {
                        //(4)createArg $i <name> $j <name> $k <name>
                        //与上面类似，但是创建参数，从bps向上 + x
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        D->createArg(
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]],
                            getTarget(root, cmd.args[5])->attrs[cmd.args[6]]
                        );
                    }
                    else if (cmd.args[0] == "takeVar") {
                        //(5)takeVar $d <name> $i <name> $j <name> 
                        //取出定义域"$d.name"变量$i.name放入栈中，代码记入$j.name
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        getTarget(root, cmd.args[5])->attrs[cmd.args[6]] = D->getVar(
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]]
                        );
                    }
                    else if (cmd.args[0] == "takeConst") {
                        // (6)takeConst $i <name> $j <name>
                        // 取出常量$i.name放入栈中，代码计入$j.name
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "push " + getTarget(root, cmd.args[1])->attrs[cmd.args[2]] + "\n";
                    }
                    else if (cmd.args[0]=="callFun") {
                        // (7)callFun $i <D> $j <name> $k <code>
                        // #调用$i.D的函数$j.name
                        // # 注意调用后压栈
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        getTarget(root, cmd.args[5])->attrs[cmd.args[6]] = D->callFun(getTarget(root, cmd.args[3])->attrs[cmd.args[4]]);
                    }
                    else if (cmd.args[0] == "getByte") {
                        // (8)getByte $i <name> $j <name>
                        // $i.name = getByte($j.name)
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = to_string(getSize(getTarget(root, cmd.args[3])->attrs[cmd.args[4]]));
                    }
                    else if (cmd.args[0] == "empty") {
                        //(9)empty $i <name>
                        //$i.name = ""
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "";
                    }
                    else if (cmd.args[0] == "let") {
                        //(10)let $i <name> <value>
                        // $i.name = value
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = cmd.args[3];
                    }
                    else if (cmd.args[0] == "mov") {
                        //(11)mov $i <name> $j <name>
                        // $i.name = $j.name
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = getTarget(root, cmd.args[3])->attrs[cmd.args[4]];
                    }
                    else if (cmd.args[0] == "add3") {
                        //(12)add3 $i <name> $j <name> $k <name>
                        // # $i.name = $j.name + $k.name（数值形式）
                        int add1 = stringToLL(getTarget(root, cmd.args[3])->attrs[cmd.args[4]]);
                        int add2 = stringToLL(getTarget(root, cmd.args[5])->attrs[cmd.args[6]]);
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = to_string(add1 + add2);
                    }
                    else if (cmd.args[0] == "link3") {
                        //(13)link3 $i <name> $j <name> $k <name>
                        // 字符串连接
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] =
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]] +
                            getTarget(root, cmd.args[5])->attrs[cmd.args[6]];
                    }
                    else if (cmd.args[0] == "print") {
                        // (14)print $i <name>
                        // # 输出 $i.name
                        cout << getTarget(root, cmd.args[1])->attrs[cmd.args[2]] << "leave\nret\n\n";//后面是防止没有返回语句
                    }
                    else if (cmd.args[0] == "pop") {
                        // (15)pop $i <code>
                        // pop一次, 代码存入$i.code
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop eax\n";
                    }
                    else if (cmd.args[0] == "return") {
                        // (16)return $x <retRef> $i <code>
                        // return, 返回值, 消除子定义域的层数x.retRef，代码存入$i.code
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "pop eax\n";
                        int leaveTime = stringToLL(getTarget(root, cmd.args[1])->attrs[cmd.args[2]]);
                        for (int i = 0;i < leaveTime;i++) {
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]] += "leave\n";
                        }
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] += "leave\nret\n";
                    }
                    else if (cmd.args[0] == "returnVoid") {
                        // (17)returnVoid $i <code>
                        // return不返回值, 代码存入$i.code
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "";
                        int leaveTime = stringToLL(getTarget(root, cmd.args[1])->attrs[cmd.args[2]]);
                        for (int i = 0;i < leaveTime;i++) {
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]] += "leave\n";
                        }
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] += "leave\nret\n";
                    }
                    else if (cmd.args[0] == "c_=") {
                        // (18)C_= $d <D> $i <name> $j <name>
                        // "以汇编码将$d.D中名为$i.name的变量进行一次赋值(从栈中取),把代码存入$j.name"
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        getTarget(root, cmd.args[5])->attrs[cmd.args[6]] = D->setVar(getTarget(root, cmd.args[3])->attrs[cmd.args[4]]);
                    }
                    else if (cmd.args[0]=="c_=Const") {
                        // (19)C_=Const $d <D> $i <name> <C> $j <name>
                        // 赋值为一个常量
                        Dspace* D = Dmap[getTarget(root, cmd.args[1])->attrs[cmd.args[2]]];
                        getTarget(root, cmd.args[6])->attrs[cmd.args[7]] = D->setVar(
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]],
                            cmd.args[5]
                        );
                    }
                    else if (cmd.args[0] == "c_||") {
                        // (20)c_|| $i <code>
                        //setnz: set if is not zero
                        string ans = "pop eax\ncmp eax, 0\nsetne al\nmovzx eax, al\n";//把a
                        ans += "pop ebx\ncmp ebx, 0\nsetne bl\nmovzx ebx, bl\n";
                        ans += "or eax, ebx\npush eax\n";
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = ans;
                    }
                    else if (cmd.args[0] == "c_&&") {
                        // (21)c_&& $i <code>
                        string ans = "pop eax\ncmp eax, 0\nsetne al\nmovzx eax, al\n";//把a
                        ans += "pop ebx\ncmp ebx, 0\nsetne bl\nmovzx ebx, bl\n";
                        ans += "and eax, ebx\npush eax\n";
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = ans;
                    }
                    else if (cmd.args[0] == "c_|") {
                        // (22)c_| $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\nor eax, ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_^") {
                        // (23)c_^ $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\nxor eax, ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_&") {
                        // (24)c_& $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\nand eax, ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_==") {
                        // (25)c_== $i <code>
                        //sete的意思是set if equal
                        //movzx是扩展位数的赋值
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncmp eax, ebx\nsete al\nmovzx eax, al\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_!=") {
                        // (26)c_!= $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncmp eax, ebx\nsetne al\nmovzx eax, al\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_>") {
                        // (27)c_> $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncmp eax, ebx\nsetg al\nmovzx eax, al\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_<") {
                        // (28)c_< $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncmp eax, ebx\nsetl al\nmovzx eax, al\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_>=") {
                        // (29)c_>= $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncmp eax, ebx\nsetge al\nmovzx eax, al\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_<=") {
                        // (30)c_<= $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncmp eax, ebx\nsetle al\nmovzx eax, al\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_+") {
                        // (31)c_+ $i < code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\nadd eax, ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_-") {
                        // (32)c_- $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\nsub eax, ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_*") {
                        // (33)c_* $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\nimul eax, ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_/") {
                        // (34)c_/ $i <code>
                        // cdq 扩展符号
                        // idiv 商在eax，余数在edx
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncdq\nidiv ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_%") {
                        // (35)c_% $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\npop eax\ncdq\nidiv ebx\npush edx\n";
                    }
                    else if (cmd.args[0] == "c_-1") {
                        // (36)c_-1 $i <code>
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop ebx\nmov eax, 0\nsub eax, ebx\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_~") {
                        // (37)c_~ $i <code>
                        //not eax 按位翻转
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop eax\nnot eax\npush eax\n";
                    }
                    else if (cmd.args[0] == "c_!") {
                        // (38)c_! $i <code>
                        // test a,b 将两个数进行按位与并设置状态
                        //setz set if is zero
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "pop eax\ntest eax, eax\nsetz al\nmovzx eax, al\npush eax\n";
                    }
                    else if (cmd.args[0] == "label") {
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "L" + to_string(L_count++);
                    }
                    else if (cmd.args[0] == "pLabel") {
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "." + getTarget(root, cmd.args[1])->attrs[cmd.args[2]] + ":\n";
                    }
                    else if (cmd.args[0] == "j") {
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "jmp ." + getTarget(root, cmd.args[1])->attrs[cmd.args[2]] + "\n";
                    }
                    else if (cmd.args[0] == "jz") {
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "pop eax\ncmp eax,0\nje ." + getTarget(root, cmd.args[1])->attrs[cmd.args[2]] + "\n";
                    }
                    else if (cmd.args[0] == "newEnv") {
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "push ebp\nmov ebp,esp\nsub esp," + getTarget(root, cmd.args[1])->attrs[cmd.args[2]] + "\n";
                    }
                    else if (cmd.args[0] == "leave") {
                        getTarget(root, cmd.args[1])->attrs[cmd.args[2]] = "leave\n";
                    }
                    else if (cmd.args[0] == "leave_n") {
                        getTarget(root, cmd.args[3])->attrs[cmd.args[4]] = "";
                        int l_time = stringToLL(getTarget(root, cmd.args[1])->attrs[cmd.args[2]]);
                        for (int i = 0;i < l_time;i++) {
                            getTarget(root, cmd.args[3])->attrs[cmd.args[4]] += "leave\n";
                        }
                    }
                    else {
                        cout << "error: unknown command [" + cmd.args[0] + "]\n";
                        return;
                    }
                }
            }
        }
    }

    for (SynTree* son : root->sons) {
        delete son;
    }
    //test
    // cout << "------------------------------------\n";
    // cout << root->type << ":" << root->name << endl;
    // cout << root->attrs["code"] << endl;
    //test end
}

void SynAnalyzer::printDirectInitCode() {
    ofstream ofile("initcode.txt");

    //栈
    ofile << "stack_state[0] = 0;\nstack_t = 1;";

    //产生式
    for (Generator* gen : gens) {
        ofile << "gens.push_back(new Generator(\"";
        gen->print(ofile);
        ofile << "\"));";
    }
    ofile << "start = gens[0]->left;";

    // 符号
    for (string ter : ters) {
        ofile << "ters.insert(\"" << ter << "\");";
    }
    for (string non : nons) {
        ofile << "nons.insert(\"" << non << "\");";
    }

    // ACTION
    cout << ACTION.size() << "," << ters.size();
    int S = ACTION.size() * ters.size();
    ofile << "ACTION = vector<map<string,pair<string,int> > >(" << ACTION.size() << ",map<string,pair<string,int>>());\n";
    ofile << "int t=0;\n";
    ofile << "string vs[" << S << "] = {";
    bool first = true;
    for (int i = 0;i < ACTION.size();i++) {
        for (string ter : ters) {
            if(!first){
                ofile << ",";
            }
            else {
                first = false;
            }
            ofile << "\"" << ACTION[i][ter].first << "\"";
        }
    }
    ofile << "};\n";
        
    ofile << "int vi["<<S<<"] = {";
    first = true;
    for (int i = 0;i < ACTION.size();i++) {
        for (string ter : ters) {
            if (!first) {
                ofile << ",";
            }
            else {
                first = false;
            }
            ofile << ACTION[i][ter].second;
        }
    }
    ofile << "};\n";
    ofile << "for (int i = 0; i < ACTION.size(); i++){for(string ter:ters){ACTION[i][ter].first = vs[t];ACTION[i][ter].second=vi[t];t++;} }\n";

    //GOTO
    ofile << "GOTO = vector<map<string,int> >(" << GOTO.size() << ",map<string,int>());\n";
    ofile << "t=0;\n";
    cout << endl << GOTO.size() <<","<< nons.size() << endl;
    S = GOTO.size() * nons.size();
    ofile << "int vi2[" << S << "] = {";
    first = true;
    for (int i = 0;i < GOTO.size();i++) {
        for (string non : nons) {
            if (!first) {
                ofile << ",";
            }
            else {
                first = false;
            }
            ofile << GOTO[i][non];
        }
    }
    ofile << "};\n";
    ofile << "for (int i = 0; i < GOTO.size(); i++){for(string non:nons){GOTO[i][non]=vi2[t++];} }\n";
    // for (int i = 0;i < GOTO.size();i++) {
    //     for (string non : nons) {
    //         ofile << GOTO[i][non] << " ";
    //     }
    //     ofile << endl;
    // }
}
